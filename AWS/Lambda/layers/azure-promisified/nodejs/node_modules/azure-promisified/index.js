const azure = require('azure-storage');
const {Chance} = require('chance')

const AZURE_TS_ORGSTABLE = process.env.AZURE_TS_ORGSTABLE;
const AZURE_TS_ORGSTABLE_PARTITIONKEY = process.env.AZURE_TS_ORGSTABLE_PARTITIONKEY;

const tableSvc = azure.createTableService();

function createNewOrganization(orgModel) {
    const entityGen = azure.TableUtilities.entityGenerator;
    const {nombreCompleto, nombreRecurso} = orgModel;

    const newOrgTask = {
        PartitionKey: entityGen.String(AZURE_TS_ORGSTABLE_PARTITIONKEY),
        RowKey: entityGen.String(nombreRecurso),
        nombreCompleto: entityGen.String(nombreCompleto),
        claveApi: entityGen.String(Chance().guid())
    }

    return createEntity(AZURE_TS_ORGSTABLE, newOrgTask)
        .then(_ => fromAzureTSModel(newOrgTask, 'claveApi'));
}

function retrieveOrganization(orgResourceName) {
    return retrieveEntity(AZURE_TS_ORGSTABLE, AZURE_TS_ORGSTABLE_PARTITIONKEY, orgResourceName);
}

function retrieveOrganizationApiKey(orgResourceName) {
    return retrieveOrganization(orgResourceName)
        .then((remoteOrg) => fromAzureTSModel(remoteOrg, "claveApi"));
}

async function organizationExists(orgResourceName) {
    try {
        return !!await retrieveOrganization(orgResourceName);
    } catch (e) {
        return false;
    }
}

function deleteOrganization(orgResourceName) {
    return deleteEntity(AZURE_TS_ORGSTABLE, AZURE_TS_ORGSTABLE_PARTITIONKEY, orgResourceName);
}

function createTable(tableName) {
    return new Promise((resolve, reject) =>
        tableSvc.createTableIfNotExists(tableName, (error, result, response) => {
            if (!error) resolve({result, response})
            else reject({error, response});
        })
    )
}

function deleteTable(tableName) {
    return new Promise((resolve, reject) => {
        tableSvc.deleteTableIfExists(tableName, (error, response) => {
            if (!error) resolve(response)
            else reject(response)
        })
    })
}

function createEntity(table, entityTask) {
    return new Promise((resolve, reject) => {
        tableSvc.insertEntity(table, entityTask, (error, metadata, response) => {
            if (!error) resolve({metadata, response})
            else reject({error, response})
        })
    })
}

function retrieveEntity(table, partitionKey, rowKey) {
    return new Promise((resolve, reject) => {
        tableSvc.retrieveEntity(table, partitionKey, rowKey, (error, result) => {
            if (!error) resolve(result);
            else reject(error);
        });
    });
}

function deleteEntity(table, partitionKey, rowKey) {
    return new Promise((resolve, reject) => {
        tableSvc.deleteEntity(table, {PartitionKey: {"_": partitionKey}, RowKey: {"_": rowKey}},
            (error, result) => {
                if (!error) resolve(result);
                else reject(error);
            })
    })
}

function fromAzureTSModel(model, key) {
    return model[key]._;
}

module.exports = {
    createNewOrganization,
    retrieveOrganization,
    retrieveOrganizationApiKey,
    organizationExists,
    deleteOrganization,
    createTable,
    deleteTable,
    createEntity,
    retrieveEntity,
    deleteEntity,
    fromAzureTSModel,
    AZURE_TS_ORGSTABLE,
    AZURE_TS_ORGSTABLE_PARTITIONKEY
}